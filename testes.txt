//Ler o input
    int v = 0;
	while(v < (num+2)){
		printf ("\nlendo linha %d ", (v+1));
		printf ("\nconteudo: %s ", input[v]);
		v++;
	}

//Le os nomes dos vértices
v = 0;
    while (v<num)
    {
        printf("%s\n", names[v]);
        v++;
    }

	    // printf("\n----------teste---------\n");

    // char delimiters[] = ":;";
    // char* fonte = input[1];
    // printf("input 1: %s \n", fonte);
    
    // strtok(fonte, delimiters);
    // printf("fonte: %s\n", fonte);
    // fonte = strtok(NULL, delimiters);
    // printf("nova fonte:  %s\n", fonte);

//Testes básicos  

// char** nomes = (char**) malloc (sizeof(char*)*4);
    // int i;
    // for (i = 0 ; i<4 ; i++){
    //     nomes[i] = (char*) malloc (sizeof(char)*20);
    // }

    
    // strcpy(nomes[0],"a");
    // strcpy(nomes[1],"b");
    // strcpy(nomes[2],"c");
    // strcpy(nomes[3],"e");
    // printf("%s", nomes[0]);
    // pGraph G = graphInit(4, nomes);

    // printf("hello world");
    // graphInsertArc(G, "a", "b");
    // graphInsertArc(G, "a", "c");
    // graphInsertArc(G, "b", "e");
    // graphInsertArc(G, "c", "e");
    // graphInsertArc(G, "e", "a");
    
    // printf("hello world");
    // printGraph(G);

    // printf("\n--------------------\n");
    // printf("%s \n", newNames[3]);
    
    

    // //linha 12 e 13 apenas para ver o funcionamento do programa, dps deverão ser excluídas
    // printGraph(G); //imprime o grafo
    // printf ("O grafo contem %d vertices e %d arestas\n", G->V, G->A); //informação extra
    // int* sc = (int*) malloc(sizeof(int)*G->V);

    // int k = graphStrongCompsK_V2(G, sc, names);


    // int lastLine = readLastLine(G->V, input);

    // printf("Versao do algoritmo de Kosaraju: %d", lastLine);

    // printf("\nTEste do grafo reverso\n");
    // pGraph reverse = createReverseGraph(G, names);
    // printGraph(reverse);

    // printf("\nTeste grafo aleatorio:\n");
    // char** namesRand;
    // pGraph rand = graphRandER(5,5, namesRand);
    // printGraph(rand);

    

    // int sc[G->V];
    // graphStrongCompsK(G, sc, names, input);

    // //linha 12 e 13 apenas para ver o funcionamento do programa, dps deverão ser excluídas
    // printGraph(G); //imprime o grafo
    // printf ("O grafo contem %d vertices e %d arestas\n", G->V, G->A); //informação extra